parallel_chains = 4,
refresh = 500
)
require(httr)
require(jsonlite)
EPC_Search <- function(LA_no){
postcode <- LA_no
epc_root <- paste0("https://epc.opendatacommunities.org/api/v1/domestic/search?accept=application/json&local-authority=",postcode)
epc_pull <- httr::GET(url=epc_root, authenticate("apn30@cam.ac.uk","d162f191c46b4aae29e4adfbfa5a30b63891f556"), accept_json())
httr::http_status(epc_pull)
epc_data <-  jsonlite::fromJSON(txt=httr::content(epc_pull, "text"))
epc_df <- as.data.frame(epc_data$rows)
return(epc_df)
}
EPC_Search("E09000014")
test <- EPC_Search("E09000014")
test$`uprn-source`
test$`uprn`
test$address
test <- EPC_Search("E07000129")
EPC_Search <- function(LA_no){
postcode <- LA_no
epc_root <- paste0("https://epc.opendatacommunities.org/api/v1/domestic/search?accept=application/json&local-authority=",postcode,"?size=5000")
epc_pull <- httr::GET(url=epc_root, authenticate("apn30@cam.ac.uk","d162f191c46b4aae29e4adfbfa5a30b63891f556"), accept_json())
httr::http_status(epc_pull)
epc_data <-  jsonlite::fromJSON(txt=httr::content(epc_pull, "text"))
epc_df <- as.data.frame(epc_data$rows)
return(epc_df)
}
test <- EPC_Search("E07000129")
EPC_Search <- function(LA_no){
postcode <- LA_no
epc_root <- paste0("https://epc.opendatacommunities.org/api/v1/domestic/search?accept=application/json&local-authority=",postcode,"&size=5000")
epc_pull <- httr::GET(url=epc_root, authenticate("apn30@cam.ac.uk","d162f191c46b4aae29e4adfbfa5a30b63891f556"), accept_json())
httr::http_status(epc_pull)
epc_data <-  jsonlite::fromJSON(txt=httr::content(epc_pull, "text"))
epc_df <- as.data.frame(epc_data$rows)
return(epc_df)
}
test <- EPC_Search("E07000129")
table(test$uprn)
hist(test$`energy-consumption-current`)
hist(as.numeric(test$`energy-consumption-current`))
hist(as.numeric(test$`energy-consumption-current`), bins=30)
hist(as.numeric(test$`energy-consumption-current`), breaks =30)
hist(as.numeric(test$`energy-consumption-current`), breaks =100)
EPC_Search <- function(LA_no){
postcode <- LA_no
epc_root <- paste0("https://epc.opendatacommunities.org/api/v1/domestic/search?accept=application/json&local-authority=",postcode,"&size=10000")
epc_pull <- httr::GET(url=epc_root, authenticate("apn30@cam.ac.uk","d162f191c46b4aae29e4adfbfa5a30b63891f556"), accept_json())
httr::http_status(epc_pull)
epc_data <-  jsonlite::fromJSON(txt=httr::content(epc_pull, "text"))
epc_df <- as.data.frame(epc_data$rows)
#epc_df <-
return(epc_df)
}
test <- EPC_Search("E07000129")
table(duplicated(test$uprn))
table(duplicated(test$uprn, fromLast = TRUE))
table(test$`lodgement-datetime`)
table(test$`inspection-date`)
EPC_Search <- function(LA_no){
postcode <- LA_no
epc_root <- paste0("https://epc.opendatacommunities.org/api/v1/domestic/search?accept=application/json&local-authority=",postcode,"&size=5000")
epc_pull <- httr::GET(url=epc_root, authenticate("apn30@cam.ac.uk","d162f191c46b4aae29e4adfbfa5a30b63891f556"), accept_json())
httr::http_status(epc_pull)
epc_data <-  jsonlite::fromJSON(txt=httr::content(epc_pull, "text"))
epc_df <- as.data.frame(epc_data$rows)
epc_df <- epc_df[order(epc_df$`inspection-date`),]
epc_df <- epc_df[!duplicated(epc_df$'uprn', fromLast=TRUE) , ]
return(epc_df)
}
test <- EPC_Search("E07000129")
parallel::detectCores()
library(cmdstanr)
require(dplyr)
require(cmdstanr)
Sys.setenv("BY_AGE" = TRUE)
by_age <- as.logical(Sys.getenv("BY_AGE"))
Sys.setenv("AGE_BANDS" = 0)
Sys.setenv("GAS_TOGGLE" = FALSE)
age_bands <- as.numeric(Sys.getenv("AGE_BANDS"))
gas_toggle <- as.logical(Sys.getenv("GAS_TOGGLE"))
getwd()
Sys.setenv("LOCAL_AUTHORITY" = "E0700016")
setwd("/Users/apn30/Library/CloudStorage/OneDrive-UniversityofCambridge/CSIC RA/GitHub_project_repository/energy_flex/02-EnergyModel/01_Base_Posterior_Sampling")
NEED_data <- read.csv(url("https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/857035/anon_set_50k_2019.csv"), header=T, stringsAsFactors = F)
if(age_bands==1){
NEED_data <- filter(NEED_data, PROP_AGE_FINAL=="101")
}else if(age_bands==2){
NEED_data <- filter(NEED_data, PROP_AGE_FINAL=="102")
}else if(age_bands==3){
NEED_data <- filter(NEED_data, PROP_AGE_FINAL=="103")
}else if(age_bands==4){
NEED_data <- filter(NEED_data, PROP_AGE_FINAL=="104")
}
# Assign group numbers based on Building Type and Age
if(by_age==TRUE & age_bands==0){
typology_parser <- function(x,y){
if(x=="Bungalow" && y==101){
type = 1
}
else if(x=="Bungalow" && y==102){
type = 2
}
else if(x=="Bungalow" && y==103){
type = 3
}
else if(x=="Bungalow" && y==104){
type = 4
}
else if(x=="Detatched" && y==101){
type = 5
}
else if(x=="Detatched" && y==102){
type = 6
}
else if(x=="Detatched" && y==103){
type = 7
}
else if(x=="Detatched" && y==104){
type = 8
}
else if(x=="End terrace" && y==101){
type = 9
}
else if(x=="End terrace" && y==102){
type = 10
}
else if(x=="End terrace" && y==103){
type = 11
}
else if(x=="End terrace" && y==104){
type = 12
}
else if(x=="Flat" && y==101){
type = 13
}
else if(x=="Flat" && y==102){
type = 14
}
else if(x=="Flat" && y==103){
type = 15
}
else if(x=="Flat" && y==104){
type = 16
}
else if(x=="Mid terrace" && y==101){
type = 17
}
else if(x=="Mid terrace" && y==102){
type = 18
}
else if(x=="Mid terrace" && y==103){
type = 19
}
else if(x=="Mid terrace" && y==104){
type = 20
}
else if(x=="Semi detached" && y==101){
type = 21
}
else if(x=="Semi detached" && y==102){
type = 22
}
else if(x=="Semi detached" && y==103){
type = 23
}
else if(x=="Semi detached" && y==104){
type = 24
}else{
type=NA
}
}
}else if(by_age==FALSE | age_bands!=0){
typology_parser <- function(x,y){
if(x=="Bungalow"){
type = 1
}
else if(x=="Detatched"){
type = 2
}
else if(x=="End terrace"){
type = 3
}
else if(x=="Flat"){
type = 4
}
else if(x=="Mid terrace"){
type = 5
}
else if(x=="Semi detached"){
type = 6
}else{
type=NA
}
}
}
household_typology <- function(need_df){
need_df$group<-NULL
need_df$group<-as.vector((mapply(typology_parser, x=need_df$PROP_TYPE, y=need_df$PROP_AGE_FINAL)))
return(need_df)
}
NEED_data_typecast <- household_typology(NEED_data)
# Apply Gas toggle in required
if(gas_toggle==TRUE){
NEED_data_typecast[,"group"] <- NEED_data_typecast$group + (length(unique(NEED_data_typecast$group))*as.numeric((NEED_data_typecast$MAIN_HEAT_FUEL==1)))
}
# Approximate area based on area banding
area_approximator <- function(area_df){
if(area_df == 1){
area_spec <- 40
}
else if(area_df == 2){
area_spec <- 75
}
else if(area_df == 3){
area_spec <- 125
}
else if(area_df == 4){
area_spec <- 175
}
else if(area_df == 5){
area_spec <- 225
}
}
NEED_data_typecast$floor_area <- as.vector(unlist(lapply(NEED_data_typecast$FLOOR_AREA_BAND, area_approximator)))
#NEED_data_typecast$Econs2017[which(is.na(NEED_data_typecast$Econs2017))] <- 0
NEED_data_typecast$Gcons2017[which(is.na(NEED_data_typecast$Gcons2017))] <- 0
NEED_data_typecast <- NEED_data_typecast %>% filter(!is.na(Econs2017)) %>% mutate(E_INT=Econs2017/floor_area)
NEED_data_typecast <- NEED_data_typecast %>% filter(!is.na(Gcons2017)) %>% mutate(G_INT=Gcons2017/floor_area)
NEED_data_typecast$E_TOT <- NEED_data_typecast$E_INT + NEED_data_typecast$G_INT
# Visualization check
require(ggplot2)
NEED_INEQ <- NEED_data_typecast %>% group_by(PROP_TYPE,PROP_AGE_FINAL,IMD_band) %>% summarise(E = mean(E_INT+G_INT))
source("EPC_Search_Fn.R")
set.seed(2019)
LAD_block <- Sys.getenv("LOCAL_AUTHORITY")
LAD_List <- read.csv("nlac2011.csv") %>%
filter(grepl(LAD_block, LAD20CD))
E_posterior_all <- NULL
i = "E07000160"
epc_df <- EPC_Search(i)
i = "E07000161"
epc_df <- EPC_Search(i)
i = "E07000162"
epc_df <- EPC_Search(i)
View(EPC_Search)
getwd()
setwd("/Users/apn30/Documents/GitHub/energy_flex/02-EnergyModel")
source("EPC_Search_Fn.R")
list.files()
setwd("/01_Base_Posterior_Sampling")
setwd("/01_Base_Posterior_Sampling")
setwd("01_Base_Posterior_Sampling/")
source("EPC_Search_Fn.R")
View(EPC_Search)
i = "E07000160"
epc_df <- EPC_Search(i)
EPC_Search("E07000163")
EPC_Search("E07000162")
EPC_Search("E07000161")
EPC_Search("E07000160")
EPC_Search("E07000163")
i = "E07000163"
epc_df <- EPC_Search(i)
epc_df_cl <- filter(epc_df, `construction-age-band` != "")
epc_df_cl <- filter(epc_df_cl, `construction-age-band` != "NO DATA!")
epc_df_cl <- filter(epc_df_cl, `construction-age-band` != "INVALID!")
epc_age_band_convert <- function(epc_age){
if(epc_age == "2018"){
NEED_AGE_BANDS <- 104
}
else if(epc_age == "2020"){
NEED_AGE_BANDS <- 104
}
else if(epc_age == "2019"){
NEED_AGE_BANDS <- 104
}
else if(epc_age == "2021"){
NEED_AGE_BANDS <- 104
}
else if(epc_age == "England and Wales: 2003-2006"){
NEED_AGE_BANDS <- 104
}
else if(epc_age == "England and Wales: 2007-2011"){
NEED_AGE_BANDS <- 104
}
else if(epc_age == "England and Wales: 2012 onwards"){
NEED_AGE_BANDS <- 104
}
else if(epc_age == "England and Wales: 2007 onwards"){
NEED_AGE_BANDS <- 104
}
else if(epc_age == "England and Wales: before 1900"){
NEED_AGE_BANDS <- 101
}
else if(epc_age == "England and Wales: 1900-1929"){
NEED_AGE_BANDS <- 101
}
else if(epc_age == "England and Wales: 1930-1949"){
NEED_AGE_BANDS <- 102
}
else if(epc_age == "England and Wales: 1950-1966"){
NEED_AGE_BANDS <- 102
}
else if(epc_age == "England and Wales: 1967-1975"){
NEED_AGE_BANDS <- 102
}
else if(epc_age == "England and Wales: 1976-1982"){
NEED_AGE_BANDS <- 103
}
else if(epc_age == "England and Wales: 1983-1990"){
NEED_AGE_BANDS <- 103
}
else if(epc_age == "England and Wales: 1991-1995"){
NEED_AGE_BANDS <- 103
}
else if(epc_age == "England and Wales: 1996-2002"){
NEED_AGE_BANDS <- 103
}else{
NEED_AGE_BANDS <- NA
}
}
epc_df_cl$NEED_AGE_BANDS <- as.vector(unlist(lapply(epc_df_cl$`construction-age-band`, epc_age_band_convert)))
if(age_bands==1){
epc_df_cl <- filter(epc_df_cl, NEED_AGE_BANDS=="101")
}else if(age_bands==2){
epc_df_cl <- filter(epc_df_cl, NEED_AGE_BANDS=="102")
}else if(age_bands==3){
epc_df_cl <- filter(epc_df_cl, NEED_AGE_BANDS=="103")
}else if(age_bands==4){
epc_df_cl <- filter(epc_df_cl, NEED_AGE_BANDS=="104")
}
epc_built_type_convert <- function(epc_type, epc_form){
if(epc_type=="Bungalow" && epc_form != ""){
built_type = "Bungalow"
}
else if(epc_type=="Flat" && epc_form != ""){
built_type = "Flat"
}
else if(epc_type=="House" && epc_form == "Detached"){
built_type = "Detatched"
}
else if(epc_type=="Maisonette" && epc_form == "Detached"){
built_type = "Detatched"
}
else if(epc_type=="House" && epc_form == "Enclosed End-Terrace"){
built_type = "End terrace"
}
else if(epc_type=="Maisonette" && epc_form == "Enclosed End-Terrace"){
built_type = "End terrace"
}
else if(epc_type=="House" && epc_form == "End-Terrace"){
built_type = "End terrace"
}
else if(epc_type=="Maisonette" && epc_form == "End-Terrace"){
built_type = "End terrace"
}
else if(epc_type=="House" && epc_form == "Enclosed Mid-Terrace"){
built_type = "Mid terrace"
}
else if(epc_type=="Maisonette" && epc_form == "Enclosed Mid-Terrace"){
built_type = "Mid terrace"
}
else if(epc_type=="House" && epc_form == "Mid-Terrace"){
built_type = "Mid terrace"
}
else if(epc_type=="Maisonette" && epc_form == "Mid-Terrace"){
built_type = "Mid terrace"
}
else if(epc_type=="House" && epc_form == "Semi-Detached"){
built_type = "Semi detached"
}
else if(epc_type=="Maisonette" && epc_form == "Semi-Detached"){
built_type = "Semi detached"
}else{
built_type <- NA
}
}
epc_df_cl$NEED_TYPE <- as.vector(unlist(mapply(epc_built_type_convert, epc_type=epc_df_cl$`property-type`,  epc_form = epc_df_cl$`built-form`)))
epc_df_cl <- filter(epc_df_cl,!is.na(`NEED_TYPE`))
epc_df_cl <- filter(epc_df_cl,!is.na(`NEED_AGE_BANDS`))
epc_df_cl$group <- as.vector((mapply(typology_parser, x=epc_df_cl$NEED_TYPE, y=epc_df_cl$NEED_AGE_BANDS)))
if(gas_toggle==TRUE){
epc_df_cl[,"group"] <- epc_df_cl$group + (length(unique(epc_df_cl$group))*as.numeric(epc_df_cl$`mains-gas-flag`=="Y"))
}
NEED_data_typecast$E_TOT_sqrt <- sqrt(NEED_data_typecast$E_TOT)
NEED_data_typecast$E_TOT_normal <- (NEED_data_typecast$E_TOT_sqrt - mean(NEED_data_typecast$E_TOT_sqrt))/sd(NEED_data_typecast$E_TOT_sqrt)
epc_df_cl <- filter(epc_df_cl, as.numeric(epc_df_cl$`energy-consumption-current`) >= 0)
epc_df_cl$E_CONS_sqrt <- sqrt(as.numeric(epc_df_cl$`energy-consumption-current`))
epc_df_cl$E_CONS_normal <- (epc_df_cl$E_CONS_sqrt - mean(NEED_data_typecast$E_TOT_sqrt))/sd(NEED_data_typecast$E_TOT_sqrt)
# create data as list for input to Stan
stan_data <- list(N = length(NEED_data_typecast$E_TOT_normal), # Number of instances in the NEED Data
M = length(epc_df_cl$E_CONS_normal),# Number of instances in the EPC data for specific region
T = length(unique(NEED_data_typecast$group)),# Number of households typology groups
E_N = NEED_data_typecast$E_TOT_normal ,
E_M = epc_df_cl$E_CONS_normal,
sigma_N = 1,
tn = as.numeric(NEED_data_typecast$group),
tm = as.numeric(epc_df_cl$group)
)
mod <- cmdstan_model("EPC_Prior_Sampling.stan")
epc_priors_haringey <- mod$sample(data = stan_data,   seed = 2019,
chains = 4,
parallel_chains = 4,
refresh = 250,
adapt_delta=0.8,
max_treedepth=10)
epc_priors_haringey
epc_priors_haringey$output()
epc_priors_haringey$data_file()
epc_priors_haringey$draws()
epc_priors_haringey$cmdstan_diagnose()
draws <- epc_priors_haringey$draws(format="df")
draws <- epc_priors_haringey$draws(format="df", variables=c("E","sigma"))
draws
draws$sigma
draws$`E[1]`
colnames(as.data.frame(draws$E)
)
colnames(as.data.frame(draws)
)
lapply(colnames(as.data.frame(draws))
)
E_prior_mean <- epc_priors_haringey$draws(format="df", variables=c("E"))
E_prior_mean$sigma <- epc_priors_haringey$draws(format="df", variables=c("sigma"))
View(E_prior_mean)
E_prior_mean <- epc_priors_haringey$draws(format="df", variables=c("E"))[,1:24]
View(E_prior_mean)
E_prior_mean$sigma <- epc_priors_haringey$draws(format="df", variables=c("sigma"))[,1]
E_prior_mean <- epc_priors_haringey$draws(format="df", variables=c("E"))[,1:24]
E_prior_mean$sigma <- epc_priors_haringey$draws(format="df", variables=c("sigma"))[,1]
reverse_convert <- function(mu,sig){
eint <- ((rnorm(1,mu,sig)*sd(NEED_data_typecast$E_TOT_sqrt))+mean(NEED_data_typecast$E_TOT_sqrt))^2
}
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean[,1:24]), function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma)}))
colnames(E_prior_mean[,1:24])
E_prior_mean[,colnames(E_prior_mean[,1:24])[2]]
View(E_posterior)
colnames(E_posterior) <- c(1:length(unique(NEED_data_typecast$group)))
View(E_posterior)
NEED_data_typecast$E_TOT_sqrt
reverse_convert <- function(mu,sig){
eint <- ((rnorm(1,mu,sig)*sd(NEED_data_typecast$E_TOT_sqrt))+mean(NEED_data_typecast$E_TOT_sqrt))^2
}
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean[,1:24]), function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma)}))
mapply(reverse_convert, mu=E_prior_mean[,2], sig=E_prior_mean$sigma)}
mapply(reverse_convert, mu=E_prior_mean[,2], sig=E_prior_mean$sigma)
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean[,1:24]), function(i){.mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma)}))
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean[,1:24]), function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma)}))
sapply(reverse_convert, mu=E_prior_mean[,2], sig=E_prior_mean$sigma)
mapply(reverse_convert, mu=E_prior_mean[,2], sig=E_prior_mean$sigma)
lapply(reverse_convert, mu=E_prior_mean[,2], sig=E_prior_mean$sigma)
apply(reverse_convert, mu=E_prior_mean[,2], sig=E_prior_mean$sigma)
lapply(colnames(E_prior_mean[,1:24]), function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma)})
lapply(reverse_convert, mu=E_prior_mean[,2], sig=E_prior_mean$sigma)
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean[,1:24]), function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma, SIMPLIFY = FALSE)}))
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean)[1:24], function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma, SIMPLIFY = FALSE)}))
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean)[1:24], function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma, SIMPLIFY = FALSE)}))
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean)[1:24], function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma, SIMPLIFY = FALSE)}))
E_prior_mean$`E[3]`
E_prior_mean$sigma
lapply(colnames(E_prior_mean)[1:24], function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma, SIMPLIFY = FALSE)})
lapply(E_prior_mean[,1], reverse_convert, sig=E_prior_mean$sigma)
lapply(mu=E_prior_mean[,1], reverse_convert, sig=E_prior_mean$sigma)
lapply(mu=E_prior_mean[,1], fun=reverse_convert, sig=E_prior_mean$sigma)
lapply(mu=E_prior_mean[,1], function=reverse_convert, sig=E_prior_mean$sigma)
mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_mean$sigma, SIMPLIFY = FALSE)
mapply(reverse_convert, mu=E_prior_mean[,3], sig=E_prior_mean$sigma, SIMPLIFY = FALSE)
mapply(reverse_convert, mu=E_prior_mean$`E[1]`, sig=E_prior_mean$sigma)
mapply(reverse_convert, mu=E_prior_mean[:,3], sig=E_prior_mean$sigma, SIMPLIFY = FALSE)
colnames(E_prior_mean)[1:24]
colnames(E_prior_mean)[1:24][2]
E_prior_mean[,colnames(E_prior_mean)[1:24][2]]
E_prior_mean[,colnames(E_prior_mean)[1:24][1]]
E_prior_mean$`E[1]`
as.vector(E_prior_mean[,colnames(E_prior_mean)[1:24][1]])
as.list(E_prior_mean[,colnames(E_prior_mean)[1:24][1]])
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean)[1:24], function(i){mapply(reverse_convert, mu=as.list(E_prior_mean[,i]), sig=E_prior_mean$sigma, SIMPLIFY = FALSE)}))
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean)[1:24], function(i){mapply(reverse_convert, mu=E_prior_mean$`E[1]`, sig=E_prior_mean$sigma, SIMPLIFY = FALSE)}))
View(E_posterior)
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean)[1:24], function(i){mapply(reverse_convert, mu=E_prior_mean$`E[1]`, sig=E_prior_mean$sigma)}))
View(E_posterior)
E_prior_mean <- epc_priors_haringey$draws(format="df", variables=c("E"))[,1:24]
E_prior_sigma <- epc_priors_haringey$draws(format="df", variables=c("sigma"))[,1]
reverse_convert <- function(mu,sig){
eint <- ((rnorm(1,mu,sig)*sd(NEED_data_typecast$E_TOT_sqrt))+mean(NEED_data_typecast$E_TOT_sqrt))^2
}
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean)[1:24], function(i){mapply(reverse_convert, mu=E_prior_mean$`E[1]`, sig=E_prior_sigma)}))
mapply(reverse_convert, mu=E_prior_mean, sig=E_prior_sigma)
mapply(reverse_convert, mu=E_prior_mean$`E[1]`, sig=E_prior_sigma)
mapply(reverse_convert, mu=E_prior_mean[,`E[1]`], sig=E_prior_sigma)
mapply(reverse_convert, mu=E_prior_mean[,"E[1]"], sig=E_prior_sigma)
mapply(reverse_convert, mu=E_prior_mean[,c("E[1]")], sig=E_prior_sigma)
mapply(reverse_convert, mu=E_prior_mean[1:4000,c("E[1]")], sig=E_prior_sigma)
mapply(reverse_convert, mu=as.list(E_prior_mean[,c("E[1]")]), sig=E_prior_sigma)
mapply(reverse_convert, mu=as.data.frame(E_prior_mean[,c("E[1]")]), sig=E_prior_sigma)
View(E_prior_mean)
colnames(E_prior_mean[1:24])
mapply(reverse_convert, mu=E_prior_mean[,1], sig=E_prior_sigma)
mapply(reverse_convert, mu=E_prior_mean[1:4000,1], sig=E_prior_sigma)
mapply(reverse_convert, mu=E_prior_mean, sig=E_prior_sigma)
mapply(reverse_convert, mu=E_prior_mean$`E[1]`, sig=E_prior_sigma)
str(E_prior_mean)
E_prior_mean <- as.data.frame(epc_priors_haringey$draws(format="df", variables=c("E"))[,1:24])
str(E_prior_mean)
E_posterior <- as.data.frame(lapply(colnames(E_prior_mean[1:24]), function(i){mapply(reverse_convert, mu=E_prior_mean[,i], sig=E_prior_sigma)}))
colnames(E_posterior) <- c(1:length(unique(NEED_data_typecast$group)))
require(reshape2)
E_posterior_plot <- melt(E_posterior)
colnames(E_posterior_plot) <- c("group","E_POS")
